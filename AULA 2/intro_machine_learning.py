# -*- coding: utf-8 -*-
"""Intro_Machine_Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BCoEnBeVEKOyBY8MwbS4D8hw9SWblX3U
"""

Demonstração Machine Learning
Programação em Inteligência Artificial
Prof. Msc. Ailton J. Santos

"""#Treino de um modelo de regressão linear simples usando o conjunto de dados de preços de casas de Boston."""

# Importar bibliotecas
import numpy as np
import pandas as pd
from sklearn.datasets import fetch_california_housing
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Carregar o conjunto de dados California Housing
california_housing = fetch_california_housing()

# Separar dados em características e variável alvo
X = california_housing.data
y = california_housing.target

# Treinar o modelo de regressão linear
modelo_linear = LinearRegression()
modelo_linear.fit(X, y)

california_housing = fetch_california_housing()
X = california_housing.data

# Verificar o número de features
n_features_original = X.shape[1]
print("Número de features no conjunto de dados original:", n_features_original)

# Verifique se X_novo tem o mesmo número de features
if X_novo.shape[1] != n_features_original:
    print("Erro: X_novo tem um número diferente de features do que o conjunto de dados de treinamento.")
    # Aplique as etapas de pré-processamento ou engenharia de features aqui
else:
    # Faça as previsões
    previsoes = modelo_linear.predict(X_novo)
    print("Previsões:", previsoes)

# Fazer previsões em um novo conjunto de dados (dados de teste)
X_novo = np.array([[2.5, 21.0, 15.0, 45.0, 12.0, 12.6, 54.21, 25.1], [5.0, 32.0, 18.0, 80.0, 24.0, 28.0, 88.32, 81.31]])
previsoes = modelo_linear.predict(X_novo)
print("Previsões:", previsoes)

# Avaliar o desempenho do modelo
mse = mean_squared_error(y, modelo_linear.predict(X))
print("Erro quadrático médio:", mse)

r2 = r2_score(y, modelo_linear.predict(X))
print("Coeficiente de determinação:", r2)