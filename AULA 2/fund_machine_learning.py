# -*- coding: utf-8 -*-
"""Fund_Machine_Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1u0Nq-fGPGc7L2uruFyizim69q1zsHLOu

###Fundamentos de Machine Learning
###Prof. Msc. Ailton J. Santos

### Obtendo fundamenta√ß√£o da Machine Learning

Problema cl√°ssico de Machine Learning - Identificando um üêñ e um üêï atrav√©s de suas caracter√≠sticas
"""

import pandas as pd
import numpy as np
from sklearn.svm import LinearSVC

"""O scikit-learn √© uma biblioteca da linguagem Python desenvolvida especificamente para aplica√ß√£o pr√°tica de machine learning.

Esta biblioteca disp√µe de ferramentas simples e eficientes para an√°lise preditiva de dados, √© reutiliz√°vel em diferentes situa√ß√µes, possui c√≥digo aberto, sendo acess√≠vel a todos e foi constru√≠da sobre os pacotes NumPy, SciPy e matplotilib.

O sklearn est√° organizado em muitos m√≥dulos, cada um desenvolvido para uma finalidade espec√≠fica. Nestes m√≥dulos encontraremos fun√ß√µes para as mais diferentes aplica√ß√µes.

Analisando estas diferentes aplica√ß√µes entenderemos a organiza√ß√£o da biblioteca, e como encontrar o que buscamos.

Pr√©-processamento ‚Äì normalmente esta √© a etapa mais trabalhosa no desenvolvimento de um modelo de machine learning. Como j√° vimos, o NumPy e o Pandas s√£o largamente utilizados nesta etapa, mas tamb√©m teremos fun√ß√µes para esta finalidade no sklearn, pensadas especialmente para tratamento de dados que alimentar√£o algoritmos de machine learning.
Classifica√ß√£o ‚Äì desenvolvimento de modelos capazes de detectar a qual categoria pr√©-determinada um elemento pertence. Podemos identificar se um aluno foi reprovado ou aprovado, se uma pessoa possui ou n√£o determinada doen√ßa, ou ainda qual doen√ßa uma pessoa pode ter dentre v√°rias poss√≠veis, dentre muitas outras possibilidades.
Regress√£o ‚Äì desenvolvimento de modelos que podem atribuir um valor cont√≠nuo a um elemento. Podemos prever o pre√ßo de um im√≥vel, altura de uma pessoa, quantidade de vendas de um produto, e assim por diante.
Clusteriza√ß√£o ‚Äì desenvolvimento de modelos para detec√ß√£o autom√°tica de grupos com caracter√≠sticas similares em seus integrantes. Podemos identificar clientes com comportamentos parecidos, grupos de risco de determinada doen√ßa, verificar padr√µes entre moradores de uma cidade, e muitos outros agrupamentos.
Redu√ß√£o de dimensionalidade ‚Äì reduzir o n√∫mero de vari√°veis em um problema. Com esta redu√ß√£o podemos diminuir consideravelmente a quantidade de c√°lculos necess√°rios em um modelo, aumentando a efici√™ncia, com uma perde m√≠nima de assertividade.
Ajuste de par√¢metros ‚Äì comparar, validar e escolher par√¢metros e modelos, de maneira automatizada. Podemos facilmente comparar diferentes par√¢metros no ajuste de um modelo, encontrando assim a melhor configura√ß√£o para a aplica√ß√£o em quest√£o.

Fonte: https://scikit-learn.org/stable/
"""

porco1=[0,1,0] # pelo, au-au,rabo
porco2=[0,1,1]
porco3=[1,1,0]

"""Caracter√≠sticas:

- Pelo (Tem pelo curto ou pelo Longo)
- Latir (Faz "Au-Au?")
- Rabo (Tem rabo curto ou longo?)

Para isso nos baseamos em:

--------------------
0 - Tem pelo curto
1 - Tem pelo longo
--------------------
--------------------
0 - N√£o faz "Au-Au"
1 - Faz "Au-Au"
--------------------
--------------------
0 - Tem rabo curto
1 - Tem rabo longo
--------------------


"""

cachorro1=[0,1,1]
cachorro2=[1,0,1]
cachorro3=[1,1,1]

treino_x= [porco1, porco2, porco3, cachorro1, cachorro2, cachorro3]
treino_y = [1,1,1,0,0,0] # 0 cachorro, 1 porco

"""Para isso nos baseamos em:

--------------------
0 - Cachorro
1 - Porco
--------------------
"""

modelo = LinearSVC()

modelo.fit (treino_x, treino_y)

animal_misterioso = [1,1,1]
modelo.predict([animal_misterioso])

